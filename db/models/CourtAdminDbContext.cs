using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using db.models;
using Microsoft.AspNetCore.DataProtection.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using CAS.API.Models.DB;
using CAS.DB.models;
using CAS.DB.models.auth;
using CAS.DB.models.courtAdmin;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Configuration.Json;
using CAS.COMMON.authorization;
using CAS.DB.models.audit;
using CAS.DB.models.audit.notmapped;
using CAS.DB.models.jc;
using CAS.DB.models.lookupcodes;
using CAS.DB.models.scheduling;

namespace CAS.DB.models
{
    public partial class CourtAdminDbContext : DbContext, IDataProtectionKeyContext
    {
        private readonly IHttpContextAccessor _httpContextAccessor;

        public CourtAdminDbContext()
        {
        }

        public CourtAdminDbContext(DbContextOptions<CourtAdminDbContext> options, IHttpContextAccessor httpContextAccessor = null)
            : base(options)
        {
            _httpContextAccessor = httpContextAccessor;
        }

        public virtual DbSet<Location> Location { get; set; }
        public virtual DbSet<LookupCode> LookupCode { get; set; }
        public virtual DbSet<LookupType> LookupType { get; set; }
        public virtual DbSet<LookupSortOrder> LookupSortOrder { get; set; }
        public virtual DbSet<Region> Region { get; set; }
        public virtual DbSet<CourtAdmin> CourtAdmin { get; set; }
        public virtual DbSet<CourtAdminLeave> CourtAdminLeave { get; set; }
        public virtual DbSet<CourtAdminAwayLocation> CourtAdminAwayLocation { get; set; }
        public virtual DbSet<CourtAdminActingRank> CourtAdminActingRank { get; set; }
        public virtual DbSet<CourtAdminTraining> CourtAdminTraining { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserRole> UserRole { get; set; }
        public virtual DbSet<Permission> Permission { get; set; }
        public virtual DbSet<Role> Role { get; set; }

        #region Scheduling

        public virtual DbSet<Shift> Shift { get; set; }
        public virtual DbSet<Assignment> Assignment { get; set; }
        public virtual DbSet<Duty> Duty { get; set; }
        public virtual DbSet<DutySlot> DutySlot { get; set; }

        #endregion Scheduling

        // This maps to the table that stores keys.
        public virtual DbSet<DataProtectionKey> DataProtectionKeys { get; set; }

        public virtual DbSet<Audit> Audit { get; set; }

        public virtual DbSet<JcSynchronization> JcSynchronization { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyAllConfigurations();
            modelBuilder.Entity<Audit>().HasIndex(a => a.KeyValues);
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                IConfigurationRoot configuration = new ConfigurationBuilder()
                    .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
                    .AddJsonFile("appsettings.json")
                    .Build();
                optionsBuilder.UseNpgsql(configuration.GetConnectionString("DatabaseConnectionString"));
            }
        }

        public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
        {
            HandleSaveChanges();
            var auditEntries = OnBeforeSaveChanges();
            var result = await base.SaveChangesAsync(cancellationToken);
            await OnAfterSaveChanges(auditEntries);
            return result;
        }

        //Only used in tests.
        public override int SaveChanges()
        {
            HandleSaveChanges();
            var auditEntries = OnBeforeSaveChanges();
            var result = base.SaveChanges();
            OnAfterSaveChanges(auditEntries);
            return result;
        }

        private List<AuditEntry> OnBeforeSaveChanges()
        {
            ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditEntry>();
            foreach (var entry in ChangeTracker.Entries())
            {
                if (entry.Entity is Audit || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                    continue;

                var auditEntry = new AuditEntry(entry);
                auditEntry.TableName = entry.Metadata.GetTableName();
                auditEntries.Add(auditEntry);

                foreach (var property in entry.Properties)
                {
                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    string propertyName = property.Metadata.Name;
                    if (SkipProperty(property))
                        continue;
                    if (IsKeyValue(property))
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    switch (entry.State)
                    {
                        case EntityState.Added:
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            break;

                        case EntityState.Deleted:
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            break;

                        case EntityState.Modified:
                            if (property.IsModified)
                            {
                                auditEntry.OldValues[propertyName] = property.OriginalValue;
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                            }
                            break;
                    }
                }
            }

            // Save audit entities that have all the modifications
            foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            {
                Audit.Add(auditEntry.ToAudit(GetUserIdFromContext()));
            }

            // keep a list of entries where the value of some properties are unknown at this step
            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }

        private bool IsKeyValue(PropertyEntry property)
        {
            if (property.Metadata.Name == "CreatedById" || property.Metadata.Name == "UpdatedById")
                return false;
            return property.Metadata.IsPrimaryKey() || property.Metadata.IsForeignKey();
        }

        private bool SkipProperty(PropertyEntry property)
        {
            return property.Metadata.Name == "CreatedOn" || property.Metadata.Name == "Photo";
        }

        private Task OnAfterSaveChanges(List<AuditEntry> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
                return Task.CompletedTask;

            foreach (var auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (SkipProperty(prop))
                        continue;
                    if (IsKeyValue(prop))
                    {
                        auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                // Save the Audit entry
                Audit.Add(auditEntry.ToAudit(GetUserIdFromContext()));
            }

            return SaveChangesAsync();
        }

        /// <summary>
        /// Save the entities with who created them or updated them.
        /// </summary>
        private void HandleSaveChanges()
        {
            var modifiedEntries = ChangeTracker.Entries()
                .Where(x => (x.State == EntityState.Added || x.State == EntityState.Modified));

            foreach (var entry in modifiedEntries)
            {
                if (entry.Entity is BaseEntity entity)
                {
                    if (entry.State == EntityState.Added)
                    {
                        entity.CreatedById = GetUserIdFromContext();
                    }
                    else if (entry.State != EntityState.Deleted)
                    {
                        entity.UpdatedById = GetUserIdFromContext();
                        entity.UpdatedOn = DateTimeOffset.Now;
                    }
                }
            }
        }

        private Guid? GetUserIdFromContext()
        {
            var userId = GetUserId(_httpContextAccessor?.HttpContext?.User.FindFirst(CustomClaimTypes.UserId)?.Value);
            userId ??= auth.User.SystemUser;
            return userId;
        }

        public TEntity DetachedClone<TEntity>(TEntity entity) where TEntity : class
            => Entry(entity).CurrentValues.Clone().ToObject() as TEntity;

        private Guid? GetUserId(string claimValue)
        {
            if (claimValue == null)
                return null;
            return Guid.Parse(claimValue);
        }
    }
}